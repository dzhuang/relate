#
# Most of these settings are taken from here:
# https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml
#

version: 1.0.{build}

build: off

image: Visual Studio 2017

cache:
  - '%LOCALAPPDATA%\pip\Cache'
  - "C:\\downloads"

environment:
  COVERALLS_REPO_TOKEN:
    secure: MYrQjJxQQjjFYq6YAEOa9myBlc04nRkiurQxpjS0t4wpm6xryCsLuwB18qgoU6EO
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  matrix:
    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: http://www.appveyor.com/docs/installed-software#python

    - PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7.x" # currently 2.7.13
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python35-x64"
      PYTHON_VERSION: "3.5.x" # currently 3.5.3
      PYTHON_ARCH: "64"

init:
  - "ECHO %PYTHON%"
  - ps: "ls C:/Python*"

install:
  # installl virtual_box
  - ps: mkdir C:\downloads | Out-Null
  - ps: cd C:\downloads
  #- ps: [Net.ServicePointManager]::SecurityProtocol = 'Ssl3, Tls, Tls11, Tls12'
#  - ps: Start-FileDownload "http://download.virtualbox.org/virtualbox/5.1.6/VirtualBox-5.1.6-110634-Win.exe"
#  - ps: Start-FileDownload "http://download.virtualbox.org/virtualbox/5.1.6/Oracle_VM_VirtualBox_Extension_Pack-5.1.6-110634.vbox-extpack"
#  - ps: Start-FileDownload "http://releases.hashicorp.com/vagrant/1.8.5/vagrant_1.8.5.msi"
#  - ps: Start-Process -FilePath "VirtualBox-5.1.6-110634-Win.exe" -ArgumentList "-silent -logging -msiparams INSTALLDIR=C:\VBox" -Wait
#  - ps: Start-Process -FilePath "msiexec.exe" -ArgumentList "/a vagrant_1.8.5.msi /qb TARGETDIR=C:\Vagrant" -Wait
  - ps: Start-FileDownload "http://download.docker.com/win/stable/DockerToolbox.exe"
  - DockerToolbox.exe /SILENT /COMPONENTS=docker,dockermachine,dockercompose
  - ps: cd $env:APPVEYOR_BUILD_FOLDER
  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=C:\\Program Files\\Docker Toolbox;%PATH%"
  - "docker-machine --version"

  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "pip install --disable-pip-version-check --user --upgrade pip"

  - "git submodule update --init --recursive"

  # Install requirements
  # need this to compile dulwich
  - SET VS90COMNTOOLS=%VS120COMNTOOLS%
  - pip install dulwich
  #- pip3 install dulwich

  - ps: "cat requirements.txt | ?{$_ -notmatch 'dnspython'} | ?{$_ -notmatch 'dulwich'} > req.txt"
  - "%CMD_IN_ENV% pip install -r req.txt"
  - ps: "if ($env:PYTHON -like '*Python2*') { pip install dnspython mock} else { pip install dnspython3 }"


before_test:
  - "%CMD_IN_ENV% pip install coverage"
  - "docker-machine create --driver hyperv default"
  - "docker-machine start default"
  - "docker-machine env default"
  - '%CMD_IN_ENV% @FOR /f tokens=*" %i IN ("docker-machine env default") DO @%i'
  - "docker pull inducer/relate-runpy-i386"

test_script:
  # Run the project tests
  - "copy local_settings.example.py local_settings.py /Y"
  - "%CMD_IN_ENV% coverage run manage.py test test/"

after_test:
  - "%CMD_IN_ENV% pip install codecov"
  - "%CMD_IN_ENV% codecov -X gcov"

on_finish:
  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
